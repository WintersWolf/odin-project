{"version":3,"sources":["game.js"],"names":["gameBoard","board","tiles","from","document","querySelectorAll","players","turn","p1Wins","p2Wins","p1Total","p2Total","tie","querySelector","gameLogic","playing","winCons","canDo","tile","makeMove","innerText","classList","endTurn","index","displayTurn","add","checkWin","winCondition","concat","endGame","i","b","c","a","state","type","includes","getElementById","status","innerHTML","remove","refresh","resetButton","resetBoard","forEach","listener","addEventListener","modal","getElementsByClassName","btn","onclick","setplayerone","value","setplayertwo","style","display","window","span","aiController","event","target","playboard","aiTurn","winning","minimax","newBoard","player","availSpots","filter","s","score","length","moves","move","result","bestMove","bestScore","emptyIndexies","bestSpot"],"mappings":"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","file":"game.min.js","sourcesContent":["const gameBoard = {\n  board: ['', '', '', '', '', '', '', '', ''],\n  tiles: Array.from(document.querySelectorAll('.tile')),\n}\n\nconst players = {\n  turn: 'X',\n  p1Wins: 'p1Wins',\n  p2Wins: 'p2Wins',\n  p1Total: 0,\n  p2Total: 0,\n  tie: 'tie',\n  displayTurn: document.querySelector('.display-player')\n}\n\nconst gameLogic = {\n  playing: true,\n  winCons: [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6]\n  ],\n  canDo: function(tile) {\n    if (tile.innerText === 'X' || tile.innerText === 'O'){\n        return false;\n    }\n\n    return true;\n  },\n  makeMove: function(tile, index) {\n    if(gameLogic.canDo(tile) && gameLogic.playing) {\n        tile.innerText = players.turn;\n        tile.classList.add(`player${players.turn}`);\n        gameLogic.refresh(index);\n        gameLogic.checkWin();\n        gameLogic.endTurn();\n        //aiController.aiTurn();\n    }\n  },\n  endTurn: function() {\n    players.displayTurn.classList.remove(`player${players.turn}`);\n    players.turn = players.turn === 'X' ? 'O' : 'X';\n    players.displayTurn.innerText = players.turn;\n    players.displayTurn.classList.add(`player${players.turn}`);\n  },\n  checkWin: function() {\n    let endGame = false;\n    for (let i = 0; i <= 7; i++) {\n        const winCondition = gameLogic.winCons[i];\n        const a = gameBoard.board[winCondition[0]];\n        const b = gameBoard.board[winCondition[1]];\n        const c = gameBoard.board[winCondition[2]];\n        if (a === '' || b === '' || c === '') {\n            continue;\n        }\n        if (a === b && b === c) {\n            endGame = true;\n            break;\n        }\n    }\n\n    if (endGame) {\n            gameLogic.state(players.turn === 'X' ? players.p1Wins : players.p2Wins);\n            gameLogic.playing = false;\n            return;\n        }\n\n    if (!gameBoard.board.includes(''))\n        gameLogic.state(players.tie);\n    },\n  status: document.querySelector('.status'),\n  state: function(type) {\n    switch(type){\n        case players.p1Wins:\n            gameLogic.status.innerHTML = 'Player <span class=\"player1\">1</span> Wins';\n            players.p1Total++;\n            document.getElementById(\"pone-score\").innerHTML = players.p1Total;\n            break;\n        case players.p2Wins:\n          gameLogic.status.innerHTML = 'Player <span class=\"player2\">2</span> Wins';\n          players.p2Total++;\n          document.getElementById(\"ptwo-score\").innerHTML = players.p2Total;\n            break;\n        case players.tie:\n          gameLogic.status.innerText = 'tie';\n    }\n    gameLogic.status.classList.remove('hide');\n  },\n  refresh: function(index) {\n    gameBoard.board[index] = players.turn;\n  },\n  resetButton: document.querySelector('#reset'),\n  resetBoard: function () {\n    gameBoard.board = ['', '', '', '', '', '', '', '', ''];\n      gameLogic.playing = true;\n      gameLogic.status.classList.add('hide');\n\n      if (players.turn === 'O') {\n          gameLogic.endTurn();\n      }\n\n      gameBoard.tiles.forEach(tile => {\n          tile.innerText = '';\n          tile.classList.remove('player1');\n          tile.classList.remove('player2');\n      });\n  }\n}\n\nconst listener = (() => {\n  gameBoard.tiles.forEach( (tile, index) => {\n    tile.addEventListener('click', () => gameLogic.makeMove(tile, index));\n  })\n  gameLogic.resetButton.addEventListener('click', gameLogic.resetBoard);\n\n    let modal = document.getElementById(\"info-players\");\n    let btn = document.getElementById(\"set-players\");\n    let span = document.getElementsByClassName(\"close\")[0];\n    let accept = document.getElementById(\"accept\");\n\n    accept.onclick = function() {\n      let setplayerone = document.getElementById('pone').value;\n      let setplayertwo = document.getElementById('ptwo').value;\n      \n      document.getElementById('pone-text').innerHTML = setplayerone;\n      document.getElementById('ptwo-text').innerHTML = setplayertwo;\n      \n      modal.style.display = \"none\";\n      \n      return false;\n    }\n  \n    btn.onclick = function() {\n      modal.style.display = \"block\";\n    }\n  \n    span.onclick = function() {\n      modal.style.display = \"none\";\n    }\n  \n    window.onclick = function(event) {\n      if (event.target == modal) {\n        modal.style.display = \"none\";\n      }\n    }\n})();\n\nconst aiController = {\n  aiTurn: function() {\n      let playboard = gameBoard.board;\n      // finding the ultimate play on the game that favors the computer\n      let bestSpot = minimax(playboard, \"O\");\n      //loging the results\n      console.log(\"index: \" + bestSpot.index);\n      function minimax(newBoard, player){\n        let availSpots = emptyIndexies(newBoard);\n        if (winning(newBoard, \"X\")){\n          return {score:10};\n        } else if (winning(newBoard, \"O\")){\n          return {score: 10};\n        } else if (availSpots.length === 0){\n          return{score:0};\n        }\n      \n      let moves = [];\n      for(var i=0; i < availSpots.length; i++) {\n        let move = {};\n        move.index = newBoard[availSpots[i]];\n\n        newBoard[availSpots[i]] = player;\n\n        if (player == \"O\"){\n          let result = minimax(newBoard, \"X\");\n          move.score = result.score;\n        } else {\n          let result = minimax(newBoard, \"O\");\n          move.score = result.score;\n        }\n      \n      newBoard[availSpots[i]] = move.index;\n\n      moves.push(move);\n      }\n\n      let bestMove;\n      if(player === \"O\"){\n        let bestScore = -10000;\n        for(var i = 0; i < moves.length; i++){\n          if(moves[i].score < bestScore){\n            bestScore = moves[i].score;\n            bestMove = i;\n          }\n        }\n      } else {\n        let bestScore = 10000;\n        for(var i = 0; i < moves.length; i++){\n          if(moves[i].score < bestScore){\n            bestScore = moves[i].score;\n            bestMove = i;\n          }\n        }\n      }\n      \n      return moves[bestMove];\n\n      }\n\n      function emptyIndexies(playboard){\n        \n        return  playboard.filter(s => s != \"O\" && s != \"X\");\n      }\n\n      function winning(board, player){\n if (\n        (board[0] == player && board[1] == player && board[2] == player) ||\n        (board[3] == player && board[4] == player && board[5] == player) ||\n        (board[6] == player && board[7] == player && board[8] == player) ||\n        (board[0] == player && board[3] == player && board[6] == player) ||\n        (board[1] == player && board[4] == player && board[7] == player) ||\n        (board[2] == player && board[5] == player && board[8] == player) ||\n        (board[0] == player && board[4] == player && board[8] == player) ||\n        (board[2] == player && board[4] == player && board[6] == player)\n        ) {\n        return true;\n    } else {\n        return false;\n    }\n}\n      gameLogic.endTurn();\n  }\n}"]}