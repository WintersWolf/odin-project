{"version":3,"sources":["game.js"],"names":["gameBoard","board","tiles","from","document","querySelectorAll","players","turn","p1Wins","p2Wins","tie","querySelector","gameLogic","playing","winCons","canDo","tile","makeMove","innerText","classList","endTurn","index","displayTurn","add","checkWin","winCondition","remove","concat","endGame","i","a","c","b","state","status","innerHTML","type","resetBoard","forEach","listener","addEventListener","resetButton"],"mappings":"aAAA,IAAMA,UAAY,CAChBC,MAAO,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAD1CC,MAAMF,MAASG,KAAGC,SAAAC,iBAAA,WAAlBC,QAAA,CAKAC,KAAMD,IACJC,OAAM,SACNC,OAAQ,SACRC,IAAAA,MACAC,YAJcN,SAAAO,cAAA,oBAQVC,UAAY,CAChBC,SAAS,EACTC,QAAS,CAUTC,CAAAA,EAAK,EAAE,GACL,CAAA,EAAIC,EAAAA,GACA,CAAA,EAAA,EAAA,GACH,CAAA,EAAA,EAAA,GARD,CAAC,EAAG,EAAG,GAUP,CAAA,EAAA,EAAO,GAjBO,CAAA,EAAA,EAAA,GAmBhBC,CAAAA,EAAAA,EAAQ,IAEFD,MAAAA,SAAKE,GACLF,MAAA,MAAAA,EAAKG,WAAL,MAAAH,EAAAE,WAMNE,SAAS,SAAAJ,EAAAK,GACPf,UAAQgB,MAARN,IAAoBG,UAApBN,UACAP,EAAQC,UAAOD,QAAAC,KACfD,EAAQgB,UAARC,IAAAjB,SAAAA,OAAgCA,QAAQC,OACxCD,UAAQgB,QAAYH,GAhCNP,UAAAY,WAkChBA,UAAUJ,YAERA,QAAK,WACDd,QAAMmB,YAAYN,UAAYO,OAA9B,SAAAC,OAAArB,QAAAC,OACAD,QAAOC,KAAmBkB,MAAhBzB,QAAUC,KAAkB,IAAtC,IACAK,QAAOgB,YAAarB,UAAMwB,QAAYlB,KACtCD,QAAOgB,YAAarB,UAAMwB,IAA1B,SAAAE,OAAArB,QAAAC,QACAiB,SAAK,WAEJ,IADG,IAAAI,GAAA,EACHC,EAAA,EAAAA,GAAA,EAAAA,IAAA,CAND,IAAMJ,EAAeb,UAAUE,QAAQe,GAOlCC,EAAD9B,UAAJC,MAAwBwB,EAAA,IACpBG,EAAU5B,UAAVC,MAAAwB,EAAA,IACAM,EAAA/B,UAAAC,MAAAwB,EAAA,IACH,GAAA,KAAAK,GAAA,KAAAE,GAAA,KAAAD,IAGDH,IAASI,GAAAA,IAAAD,GAAA,CACLnB,GAAgBN,EAChBM,OAIR,GAAIgB,EAIC,OA5DShB,UAAAqB,MAAA,MAAA3B,QAAAC,KAAAD,QAAAE,OAAAF,QAAAG,aA2DRL,UAASO,SAAT,GAIEC,UAAUsB,MAAOC,SAAjB,KACAvB,UAAAqB,MAAA3B,QAAAI,MACJwB,OAAA9B,SAAaK,cAAb,WACEG,MAAAA,SAAUsB,GACR,OAAAE,GALJ,KAAK9B,QAAQE,OAMRF,UAAL4B,OAAAC,UAAA,6CACEvB,MARN,KAAAN,QAAAG,OAKMG,UAAUsB,OAAOC,UAAY,6CAKnCvB,MAvEc,KAAAN,QAAAI,IAyETE,UAAEsB,OAAAhB,UAAgB,MAzETN,UAAAsB,OAAAf,UAAAO,OAAA,SA6EhBW,QAAAA,SAAYhB,GACVrB,UAAUC,MAAVoB,GAAkBf,QAAAC,MAEhBK,YAAUsB,SAAOf,cAAc,UAHnCkB,WAAY,WAKRrC,UAAIM,MAAA,CAAA,GAAiB,GAAK,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,IACtBM,UAAUQ,SAAV,EACHR,UAAAsB,OAAAf,UAAAI,IAAA,QAED,MAAAvB,QAAUE,MACFU,UAAJQ,UADJpB,UAAAE,MAAAoC,QAAA,SAAAtB,GAKHA,EAAAE,UAAA,GA3FHF,EAAAG,UAAAO,OAAA,WAyFUV,EAAKG,UAAUO,OAAO,eAO5Ba,UACDvC,UAFDE,MAAAoC,QAAA,SAAAtB,EAAAK,GAGAT,EAAAA,iBAAsB4B,QAAAA,WAAAA,OAAiB5B,UAASA,SAAUyB,EAAAA,YAA1DzB,UAAU6B,YAAYD,iBAAiB,QAAS5B,UAAUyB","file":"game.min.js","sourcesContent":["const gameBoard = {\n  board: ['', '', '', '', '', '', '', '', ''],\n  tiles: Array.from(document.querySelectorAll('.tile')),\n}\n\nconst players = {\n  turn: 'X',\n  p1Wins: 'p1Wins',\n  p2Wins: 'p2Wins',\n  tie: 'tie',\n  displayTurn: document.querySelector('.display-player'),\n}\n\nconst gameLogic = {\n  playing: true,\n  winCons: [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6]\n  ],\n  canDo: function(tile) {\n    if (tile.innerText === 'X' || tile.innerText === 'O'){\n        return false;\n    }\n\n    return true;\n  },\n  makeMove: function(tile, index) {\n    if(gameLogic.canDo(tile) && gameLogic.playing) {\n        tile.innerText = players.turn;\n        tile.classList.add(`player${players.turn}`);\n        gameLogic.refresh(index);\n        gameLogic.checkWin();\n        gameLogic.endTurn();\n    }\n  },\n  endTurn: function() {\n    players.displayTurn.classList.remove(`player${players.turn}`);\n    players.turn = players.turn === 'X' ? 'O' : 'X';\n    players.displayTurn.innerText = players.turn;\n    players.displayTurn.classList.add(`player${players.turn}`);\n  },\n  checkWin: function() {\n    let endGame = false;\n    for (let i = 0; i <= 7; i++) {\n        const winCondition = gameLogic.winCons[i];\n        const a = gameBoard.board[winCondition[0]];\n        const b = gameBoard.board[winCondition[1]];\n        const c = gameBoard.board[winCondition[2]];\n        if (a === '' || b === '' || c === '') {\n            continue;\n        }\n        if (a === b && b === c) {\n            endGame = true;\n            break;\n        }\n    }\n\n    if (endGame) {\n            gameLogic.state(players.turn === 'X' ? players.p1Wins : players.p2Wins);\n            gameLogic.playing = false;\n            return;\n        }\n\n    if (!gameBoard.board.includes(''))\n        gameLogic.state(players.tie);\n    },\n  status: document.querySelector('.status'),\n  state: function(type) {\n    switch(type){\n        case players.p1Wins:\n            gameLogic.status.innerHTML = 'Player <span class=\"player1\">1</span> Wins';\n            break;\n        case players.p2Wins:\n          gameLogic.status.innerHTML = 'Player <span class=\"player2\">2</span> Wins';\n            break;\n        case players.tie:\n          gameLogic.status.innerText = 'tie';\n    }\n    gameLogic.status.classList.remove('hide');\n  },\n  refresh: function(index) {\n    gameBoard.board[index] = players.turn;\n  },\n  resetButton: document.querySelector('#reset'),\n  resetBoard: function () {\n    gameBoard.board = ['', '', '', '', '', '', '', '', ''];\n      gameLogic.playing = true;\n      gameLogic.status.classList.add('hide');\n\n      if (players.turn === 'O') {\n          gameLogic.endTurn();\n      }\n\n      gameBoard.tiles.forEach(tile => {\n          tile.innerText = '';\n          tile.classList.remove('player1');\n          tile.classList.remove('player2');\n      });\n  }\n}\n\nconst listener = (() => {\n  gameBoard.tiles.forEach( (tile, index) => {\n    tile.addEventListener('click', () => gameLogic.makeMove(tile, index));\n  })\n  gameLogic.resetButton.addEventListener('click', gameLogic.resetBoard);\n})();"]}